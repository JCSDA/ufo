version: 0.2

env:
  parameter-store:
    GIT_USER: "/CodeBuild/Git_USER"
    GIT_PASS: "/CodeBuild/Git_PASS"

phases:
  install:
    commands:
      - echo Executing install phase
      - echo $CODEBUILD_RESOLVED_SOURCE_VERSION
      - echo $CODEBUILD_SOURCE_REPO_URL
      - echo $CODEBUILD_SOURCE_VERSION

      - echo $CODEBUILD_WEBHOOK_MERGE_COMMIT
      - echo $CODEBUILD_WEBHOOK_PREV_COMMIT
      - echo $CODEBUILD_WEBHOOK_HEAD_REF
      - echo $CODEBUILD_WEBHOOK_ACTOR_ACCOUNT_ID
      - echo $CODEBUILD_WEBHOOK_EVENT
      - echo $CODEBUILD_WEBHOOK_TRIGGER
      - echo $CODEBUILD_WEBHOOK_BASE_REF

      - if [ "$CODEBUILD_WEBHOOK_EVENT" = "PULL_REQUEST_MERGED" ];
        then export CODEBUILD_GIT_BRANCH="develop";
        echo "Merging to develop";
        else export CODEBUILD_GIT_BRANCH=${CODEBUILD_WEBHOOK_HEAD_REF#refs/heads/};
        fi

      - echo "CODEBUILD_GIT_BRANCH=${CODEBUILD_GIT_BRANCH}"
      - echo "CODEBUILD_SOURCE_VERSION=${CODEBUILD_SOURCE_VERSION}"

      - echo MPI setup for Docker
      - mkdir -p /var/run/sshd
      - ssh-keygen -A
      - sed -i 's/#PermitRootLogin yes/PermitRootLogin yes/g' /etc/ssh/sshd_config
      - sed -i 's/#RSAAuthentication yes/RSAAuthentication yes/g' /etc/ssh/sshd_config
      - sed -i 's/#PubkeyAuthentication yes/PubkeyAuthentication yes/g' /etc/ssh/sshd_config

      - groupadd jcsda -g 9999
      - useradd jcsdauser
      - mkdir -p /jcsda /build_container
      - chown -R jcsdauser:jcsda /build_container  /usr/local
      - chmod 6755 /jcsda /build_container /usr/local

      - mkdir /jcsda/.ssh ; echo "StrictHostKeyChecking no" > /jcsda/.ssh/config
      - mkdir -p /jcsda/.openmpi
      - mkdir -p /home/jcsdauser/.openmpi

      - cp CI/default-mca-params.conf /home/jcsdauser/.openmpi/mca-params.conf
      - cat /home/jcsdauser/.openmpi/mca-params.conf
      - chown -R jcsdauser:jcsda /jcsda/

      - su - jcsdauser -c "ssh-keygen -f /jcsda/.ssh/id_rsa -t rsa -N ''
        && chmod 600 /jcsda/.ssh/config
        && chmod 700 /jcsda/.ssh
        && cp /jcsda/.ssh/id_rsa.pub /jcsda/.ssh/authorized_keys
        && echo MPI setup for Docker done"
      - su - jcsdauser -c "echo $CC
        && echo $CXX
        && echo $FC
        && whereis mpicc"

  pre_build:
    commands:
      - echo Executing pre_build phase
      - git lfs install # creates .gitconfig
      - cp ~/.gitconfig /home/jcsdauser/

      - cd CI
 
      - if [ "$CODEBUILD_GIT_BRANCH" = "develop" ];
        then export CODEBUILD_GIT_BRANCH_FORK="release-stable";
        else export CODEBUILD_GIT_BRANCH_FORK=${CODEBUILD_GIT_BRANCH};
        echo "CODEBUILD_GIT_BRANCH_FORK=${CODEBUILD_GIT_BRANCH_FORK}";
        fi

      ##  public repos
      # ufo
      - ./clone.sh $GIT_USER $GIT_PASS jcsda/ufo $CODEBUILD_GIT_BRANCH ufo /jcsda/ufo-bundle develop

      # crtm
      - ./clone.sh $GIT_USER $GIT_PASS jcsda/crtm $CODEBUILD_GIT_BRANCH crtm /jcsda/ufo-bundle release/crtm_jedi

      # ioda
      - ./clone.sh $GIT_USER $GIT_PASS jcsda/ioda $CODEBUILD_GIT_BRANCH ioda /jcsda/ufo-bundle develop

      # saber
      - ./clone.sh $GIT_USER $GIT_PASS jcsda/saber $CODEBUILD_GIT_BRANCH saber /jcsda/ufo-bundle develop

      # oops
      - ./clone.sh $GIT_USER $GIT_PASS jcsda/oops $CODEBUILD_GIT_BRANCH oops /jcsda/ufo-bundle develop


      ##  ecmwf repos
      # atlas
      - ./clone.sh $GIT_USER $GIT_PASS jcsda-internal/atlas $CODEBUILD_GIT_BRANCH_FORK atlas /jcsda/ufo-bundle release-stable

      #fckit
      - ./clone.sh $GIT_USER $GIT_PASS jcsda-internal/fckit $CODEBUILD_GIT_BRANCH_FORK fckit /jcsda/ufo-bundle release-stable


      ##  internal repos
      # jedi-cmake
      - ./clone.sh $GIT_USER $GIT_PASS jcsda-internal/jedi-cmake $CODEBUILD_GIT_BRANCH jedicmake /jcsda/ufo-bundle develop

      # ioda-engines
      - ./clone.sh $GIT_USER $GIT_PASS jcsda-internal/ioda-engines $CODEBUILD_GIT_BRANCH ioda_engines /jcsda/ufo-bundle develop

      # rttov
      - ./clone.sh $GIT_USER $GIT_PASS jcsda-internal/rttov $CODEBUILD_GIT_BRANCH rttov /jcsda/ufo-bundle develop

      # ropp
      - ./clone.sh $GIT_USER $GIT_PASS jcsda-internal/ropp-test $CODEBUILD_GIT_BRANCH ropp-ufo /jcsda/ufo-bundle develop

      # geos-aero
      - ./clone.sh $GIT_USER $GIT_PASS jcsda-internal/geos-aero $CODEBUILD_GIT_BRANCH geos-aero /jcsda/ufo-bundle develop

      #gsw
      - ./clone.sh $GIT_USER $GIT_PASS jcsda-internal/GSW-Fortran $CODEBUILD_GIT_BRANCH gsw /jcsda/ufo-bundle develop

      # move CMakeLists.txt
      - cp CMakeLists.txt /jcsda/ufo-bundle
      - cp -r cmake /jcsda/ufo-bundle/
      - cd /jcsda/ufo-bundle

      - ls -lt /jcsda/ufo-bundle/ufo
      - sed -i 's/BRANCH develop  UPDATE//' CMakeLists.txt
      - sed -i 's/BRANCH develop //' CMakeLists.txt
      - sed -i 's/BRANCH release-stable UPDATE//' CMakeLists.txt
      - sed -i -e '/ecbuild_bundle( PROJECT ufo/i\
        ecbuild_bundle( PROJECT ropp-ufo  GIT "https://github.com/JCSDA/ropp-test.git" )' CMakeLists.txt
      - sed -i -e '/ecbuild_bundle( PROJECT ufo/i\
        ecbuild_bundle( PROJECT geos-aero  GIT "https://github.com/JCSDA/geos-aero.git" )' CMakeLists.txt
      - cat CMakeLists.txt

      - chmod -R 777 /jcsda/ufo-bundle
      - ls -lt /jcsda/ufo-bundle
  build:
    commands:
      - echo Executing build phase
      - echo $CODEBUILD_BUILD_SUCCEEDING
      - export BUILD_STATUS="0"
      - echo $BUILD_STATUS

      - gcc --version
      - g++ --version
      - gfortran --version
      - which gfortran
      - which gcc
      - which g++
      - ls /usr/local/bin
      - echo $PATH

      - su - jcsdauser -c "cd /build_container
        && echo $CC
        && echo $CXX
        && echo $FC
        && CC=mpicc CXX=mpicxx FC=mpifort 
        && cmake  -DCMAKE_MODULE_PATH=/usr/local/share/ecbuild/cmake/ -DBUILD_RTTOV=1 -DCMAKE_BUILD_TYPE=Debug -DENABLE_GPROF=ON -DCMAKE_CXX_COMPILER=$(which g++) -DCMAKE_C_COMPILER=$(which gcc) -DCMAKE_Fortran_COMPILER=$(which gfortran) /jcsda/ufo-bundle/
        && cd ufo
        && make -j4"

      - if [ "$CODEBUILD_BUILD_SUCCEEDING" = "1" ];
        then export BUILD_STATUS="1";
        echo "Build passed";
        fi
      - echo $BUILD_STATUS

      - su - jcsdauser -c "CC=mpicc CXX=mpicxx FC=mpifort
        && cd /build_container/ufo
        && ctest"

  post_build:
    commands:
      - echo Executing post_build phase
      - echo $CODEBUILD_BUILD_SUCCEEDING
      - if [ "$BUILD_STATUS" = "1" ] && [ "$CODEBUILD_BUILD_SUCCEEDING" = "0" ];
        then echo "Build passed, rerunning failed tests";
        su - jcsdauser -c "cd /build_container/ufo
        && ctest -VV --rerun-failed";
        else echo "Build failed";
        fi
      - echo 'Connect to CodeCov'
      - cd /build_container/ufo
      - pwd
      - ls
      - bash /jcsda/ufo-bundle/ufo/CI/codecov_script.sh
