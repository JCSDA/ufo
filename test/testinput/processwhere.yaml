successful:
  window begin: 2018-01-01T00:00:00Z
  window end: 2019-01-01T00:00:00Z
  obs space:
    name: ProcessWhere Test Data
    obsdatain:
      obsfile: Data/ufo/testinput_tier_1/filters_testdata.nc4
    simulated variables: [var1]
    nlocs: 10
  ProcessWhere:
    - where:                      # test minvalue when all are >= min
      - variable:
          name:  var1@MetaData
        minvalue: 1
  # var1@MetaData = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
      size where true: 10
    - where:                      # test minvalue when it's in the middle of the range
      - variable:
          name:  var1@MetaData
        minvalue: 4
  # var1@MetaData = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
      size where true: 7
    - where:                      # test minvalue when all are < min
      - variable:
          name:  var1@MetaData
        minvalue: 11
  # var1@MetaData = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
      size where true: 0
    - where:                      # test maxvalue when all are <= max
      - variable:
          name:  var1@MetaData
        maxvalue: 10
  # var1@MetaData = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
      size where true: 10
    - where:                      # test maxvalue when all but one are > max, one == max
      - variable:
          name:  var1@MetaData
        maxvalue: 1
  # var1@MetaData = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
      size where true: 1
    - where:                      # test min & max at the same time when all should pass
      - variable:
          name:  var2@MetaData
        minvalue: 1
        maxvalue: 10
  # var2@MetaData = 10, 9, 8, 7, 6, 5, 4, 3, 2, 1
      size where true: 10
    - where:                      # test min & max at the same time when some should pass
      - variable:
          name:  var2@MetaData
        minvalue: 2
        maxvalue: 5
  # var2@MetaData = 10, 9, 8, 7, 6, 5, 4, 3, 2, 1
      size where true: 4
    - where:                      # test min & max at the same time when max < min
      - variable:
          name:  var2@MetaData
        minvalue: 6
        maxvalue: 4
  # var2@MetaData = 10, 9, 8, 7, 6, 5, 4, 3, 2, 1
      size where true: 0
    - where:                      # test min & max at the same time when max == min
      - variable:
          name:  var2@MetaData
        minvalue: 7
        maxvalue: 7
  # var2@MetaData = 10, 9, 8, 7, 6, 5, 4, 3, 2, 1
      size where true: 1
    - where:                      # test min & max  for variable with missing values
      - variable:
          name:  var5@MetaData
        minvalue: 2
        maxvalue: 5
  # var5@MetaData = 1, _, 2, _, 3, _, 4, _, 5, 0
      size where true: 4
    - where:                      # test min & max  for variable with missing values
      - variable:
          name:  var5@MetaData
        minvalue: 0
        maxvalue: 100
  # var5@MetaData = 1, _, 2, _, 3, _, 4, _, 5, 0
      size where true: 6
    - where:                      # test min & max  for variable with missing values
      - variable:
          name:  var5@MetaData
        minvalue: 100
  # var5@MetaData = 1, _, 2, _, 3, _, 4, _, 5, 0
      size where true: 0
    - where:                      # test min & max for datetime hours
      - variable:
          name:  datetime@MetaData
        minvalue: 0000-00-00T14:00:00Z
        maxvalue: 0000-00-00T18:00:00Z 
  # datetime1@MetaData = [2018-04-15T06:00:00Z, 2018-04-16T15:00:00Z, 2018-04-17T06:00:00Z, 2018-04-18T15:00:00Z, 2018-04-19T06:00:00Z, 2018-04-20T15:00:00Z, 2018-04-21T06:00:00Z, 2018-04-22T15:00:00Z, 2018-04-23T06:00:00Z, 2018-04-24T15:00:00Z]
      size where true: 5
    - where:                      # test minvalue for datetime hours
      - variable:
          name:  datetime@MetaData
        minvalue: 0000-00-00T14:00:00Z
  # datetime1@MetaData = [2018-04-15T06:00:00Z, 2018-04-16T15:00:00Z, 2018-04-17T06:00:00Z, 2018-04-18T15:00:00Z, 2018-04-19T06:00:00Z, 2018-04-20T15:00:00Z, 2018-04-21T06:00:00Z, 2018-04-22T15:00:00Z, 2018-04-23T06:00:00Z, 2018-04-24T15:00:00Z]
      size where true: 5
    - where:                      # test minvalue for datetime hours unconstrained maxvalue
      - variable:
          name:  datetime@MetaData
        minvalue: 0000-00-00T14:00:00Z
        maxvalue: 0000-00-00T00:00:00Z
  # datetime1@MetaData = [2018-04-15T06:00:00Z, 2018-04-16T15:00:00Z, 2018-04-17T06:00:00Z, 2018-04-18T15:00:00Z, 2018-04-19T06:00:00Z, 2018-04-20T15:00:00Z, 2018-04-21T06:00:00Z, 2018-04-22T15:00:00Z, 2018-04-23T06:00:00Z, 2018-04-24T15:00:00Z]
      size where true: 5
    - where:                      # test maxvalue for datetime hours
      - variable:
          name:  datetime@MetaData
        maxvalue: 0000-00-00T14:00:00Z
  # datetime1@MetaData = [2018-04-15T06:00:00Z, 2018-04-16T15:00:00Z, 2018-04-17T06:00:00Z, 2018-04-18T15:00:00Z, 2018-04-19T06:00:00Z, 2018-04-20T15:00:00Z, 2018-04-21T06:00:00Z, 2018-04-22T15:00:00Z, 2018-04-23T06:00:00Z, 2018-04-24T15:00:00Z]
      size where true: 5
    - where:                      # test maxvalue for datetime hours with unconstrained minvalue
      - variable:
          name:  datetime@MetaData
        minvalue: 0000-00-00T00:00:00Z
        maxvalue: 0000-00-00T14:00:00Z
  # datetime1@MetaData = [2018-04-15T06:00:00Z, 2018-04-16T15:00:00Z, 2018-04-17T06:00:00Z, 2018-04-18T15:00:00Z, 2018-04-19T06:00:00Z, 2018-04-20T15:00:00Z, 2018-04-21T06:00:00Z, 2018-04-22T15:00:00Z, 2018-04-23T06:00:00Z, 2018-04-24T15:00:00Z]
      size where true: 5
    - where:                      # test unconstrained minvalue and maxvalue for datetime hours
      - variable:
          name:  datetime@MetaData
        minvalue: 0000-00-00T00:00:00Z
        maxvalue: 0000-00-00T00:00:00Z
  # datetime1@MetaData = [2018-04-15T06:00:00Z, 2018-04-16T15:00:00Z, 2018-04-17T06:00:00Z, 2018-04-18T15:00:00Z, 2018-04-19T06:00:00Z, 2018-04-20T15:00:00Z, 2018-04-21T06:00:00Z, 2018-04-22T15:00:00Z, 2018-04-23T06:00:00Z, 2018-04-24T15:00:00Z]
      size where true: 10
    - where:                      # test that AND for 2 conditions works as expected
      - variable:
          name:  var1@MetaData
        maxvalue: 5
      - variable:
          name:  var2@MetaData
        maxvalue: 6
  # var1@MetaData = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
  # var2@MetaData = 10, 9, 8, 7, 6, 5, 4, 3, 2, 1
      size where true: 1
    - where:                      # test that AND for 2 conditions works as expected
      - variable:
          name:  var1@MetaData
        maxvalue: 5
      - variable:
          name:  var2@MetaData
        minvalue: 6
  # var1@MetaData = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
  # var2@MetaData = 10, 9, 8, 7, 6, 5, 4, 3, 2, 1
      size where true: 5
    - where:                      # test that is_defined works when all is defined
      - variable:
          name:  var1@MetaData
        is_defined:
  # var1@MetaData = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
      size where true: 10
    - where:                      # test that is_not_defined works when all is defined
      - variable:
          name:  var1@MetaData
        is_not_defined:
  # var1@MetaData = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
      size where true: 0
    - where:                      # test that is_defined works when some are defined
      - variable:
          name:  var5@MetaData
        is_defined:
  # var5@MetaData = 1, _, 2, _, 3, _, 4, _, 5, 0
      size where true: 6
    - where:                      # test that is_not_defined works when some are defined
      - variable:
          name:  var5@MetaData
        is_not_defined:
  # var5@MetaData = 1, _, 2, _, 3, _, 4, _, 5, 0
      size where true: 4
    - where:                       # test is_in
      - variable:
          name:  intvar3@MetaData
        is_in: 1
  # intvar3@MetaData = 1, 1, 1, 1, 1, 0, 0, 0, 0, 0
      size where true: 5
    - where:                       # test is_in
      - variable:
          name:  intvar4@MetaData
        is_in: 0-3
  # intvar4@MetaData = 0, 0, 0, 0, 0, 1, 2, 3, 4, 5
      size where true: 8
    - where:                       # test is_in for string-based inputs
      - variable:
          name:  station_id@MetaData
        is_in: [WARUBAJH, MTLGWTHE, XKEHXQSD]
  # station_id@MetaData = WARUBAJH, HUAVFIBU, DKPAIDZX, MTLGWTHE, LESDCYOD, UGCMFXFK, HSMHFHQI, JALVYAAR, MOYSUYWB, XKEHXQSD
      size where true: 3
    - where:                       # test is_in for string-based inputs, ignore value not present (DUMMYVAL)
      - variable:
          name:  station_id@MetaData
        is_in: [WARUBAJH, MTLGWTHE, XKEHXQSD, DUMMYVAL]
  # station_id@MetaData = WARUBAJH, HUAVFIBU, DKPAIDZX, MTLGWTHE, LESDCYOD, UGCMFXFK, HSMHFHQI, JALVYAAR, MOYSUYWB, XKEHXQSD
      size where true: 3
    - where:                       # test is_in for string-based inputs with duplicates
      - variable:
          name:  station_id@MetaData
        is_in: [WARUBAJH, MTLGWTHE, XKEHXQSD, XKEHXQSD]
  # station_id@MetaData = WARUBAJH, HUAVFIBU, DKPAIDZX, MTLGWTHE, LESDCYOD, UGCMFXFK, HSMHFHQI, JALVYAAR, MOYSUYWB, XKEHXQSD
      size where true: 3
    - where:                       # test is_in when nothing is in
      - variable:
          name:  intvar3@MetaData
        is_in: 5-22
  # intvar3@MetaData = 1, 1, 1, 1, 1, 0, 0, 0, 0, 0
      size where true: 0
    - where:                       # test is_in when all is in
      - variable:
          name:  intvar3@MetaData
        is_in: 0, 1
  # intvar3@MetaData = 1, 1, 1, 1, 1, 0, 0, 0, 0, 0
      size where true: 10
    - where:                       # test is_in when some values are missing
      - variable:
          name:  intvar5@MetaData
        is_in: 0-3
  # intvar5@MetaData = 1, _, 2, _, 3, _, 4, _, 5, 0
      size where true: 4
    - where:                       # test is_not_in
      - variable:
          name:  intvar3@MetaData
        is_not_in: 1
  # intvar3@MetaData = 1, 1, 1, 1, 1, 0, 0, 0, 0, 0
      size where true: 5
    - where:                       # test is_not_in
      - variable:
          name:  intvar4@MetaData
        is_not_in: 0-3
  # intvar4@MetaData = 0, 0, 0, 0, 0, 1, 2, 3, 4, 5
      size where true: 2
    - where:                       # test is_not_in when nothing is in
      - variable:
          name:  intvar3@MetaData
        is_not_in: 5-22
  # intvar3@MetaData = 1, 1, 1, 1, 1, 0, 0, 0, 0, 0
      size where true: 10
    - where:                       # test is_not_in when all is in
      - variable:
          name:  intvar3@MetaData
        is_not_in: 0, 1
  # intvar3@MetaData = 1, 1, 1, 1, 1, 0, 0, 0, 0, 0
      size where true: 0
    - where:                       # test is_not_in when some values are missing
      - variable:
          name:  intvar5@MetaData
        is_not_in: 0-3
  # intvar5@MetaData = 1, _, 2, _, 3, _, 4, _, 5, 0
      size where true: 2
    - where:                       # test is_not_in for string-based inputs
      - variable:
          name:  station_id@MetaData
        is_not_in: [WARUBAJH, MTLGWTHE, XKEHXQSD]
  # station_id@MetaData = WARUBAJH, HUAVFIBU, DKPAIDZX, MTLGWTHE, LESDCYOD, UGCMFXFK, HSMHFHQI, JALVYAAR, MOYSUYWB, XKEHXQSD
      size where true: 7
    - where:                       # test is_not_in for string-based inputs, ignore value not present (DUMMYVAL)
      - variable:
          name:  station_id@MetaData
        is_not_in: [WARUBAJH, MTLGWTHE, XKEHXQSD, DUMMYVAL]
  # station_id@MetaData = WARUBAJH, HUAVFIBU, DKPAIDZX, MTLGWTHE, LESDCYOD, UGCMFXFK, HSMHFHQI, JALVYAAR, MOYSUYWB, XKEHXQSD
      size where true: 7
    - where:                       # test is_not_in for string-based inputs with duplicates
      - variable:
          name:  station_id@MetaData
        is_not_in: [WARUBAJH, MTLGWTHE, XKEHXQSD, XKEHXQSD]
  # station_id@MetaData = WARUBAJH, HUAVFIBU, DKPAIDZX, MTLGWTHE, LESDCYOD, UGCMFXFK, HSMHFHQI, JALVYAAR, MOYSUYWB, XKEHXQSD
      size where true: 7
    - where:                      # test any_bit_set_of with a single bit specified
      - variable:
          name:  intvar1@MetaData
        any_bit_set_of: 3
  # intvar1@MetaData =    1,    2,    3,    4,    5,    6,    7,    8,    9,   10,
  # i.e. binary        0001, 0010, 0011, 0100, 0101, 0110, 0111, 1000, 1001, 1010
      size where true: 3  # "where" should select the following values of intvar1: 8, 9, 10
    - where:                      # test any_bit_set_of with multiple bits specified
      - variable:
          name:  intvar1@MetaData
        any_bit_set_of: 0, 1
  # intvar1@MetaData =    1,    2,    3,    4,    5,    6,    7,    8,    9,   10,
  # i.e. binary        0001, 0010, 0011, 0100, 0101, 0110, 0111, 1000, 1001, 1010
      size where true: 8  # "where" should select all values of intvar1 except for 4 and 8
    - where:                      # test any_bit_unset_of with a single bit specified
      - variable:
          name:  intvar1@MetaData
        any_bit_unset_of: 3
  # intvar1@MetaData =    1,    2,    3,    4,    5,    6,    7,    8,    9,   10,
  # i.e. binary        0001, 0010, 0011, 0100, 0101, 0110, 0111, 1000, 1001, 1010
      size where true: 7  # "where" should select all values of intvar1 except for 8, 9, 10
    - where:                      # test any_bit_unset_of with multiple bits specified
      - variable:
          name:  intvar1@MetaData
        any_bit_unset_of: 0, 1
  # intvar1@MetaData =    1,    2,    3,    4,    5,    6,    7,    8,    9,   10,
  # i.e. binary        0001, 0010, 0011, 0100, 0101, 0110, 0111, 1000, 1001, 1010
      size where true: 8  # "where" should select the following values of intvar1: 3 and 7

user_error_type_handling_is_in:
  window begin: 2018-01-01T00:00:00Z
  window end: 2019-01-01T00:00:00Z
  obs space:
    name: ProcessWhere Test Data
    obsdatain:
      obsfile: Data/ufo/testinput_tier_1/filters_testdata.nc4
    simulated variables: [var1]
    nlocs: 10
  ProcessWhere:
    - where:                       # test is_not_in for unsupported type (float)
      - variable:
          name:  var1@MetaData
        is_not_in: 0.5
      size where true: 0
    - where:                       # test is_in for unsupported type (float)
      - variable:
          name:  var1@MetaData
        is_in: 0.5
      size where true: 0
