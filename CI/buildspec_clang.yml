version: 0.2

env:
  parameter-store:
    GIT_USER: "/CodeBuild/Git_USER"
    GIT_PASS: "/CodeBuild/Git_PASS"

phases:
  install:
    commands:
      - echo Executing install phase
      - echo $CODEBUILD_WEBHOOK_TRIGGER
      - echo $CODEBUILD_WEBHOOK_BASE_REF
      - echo $CODEBUILD_WEBHOOK_ACTOR_ACCOUNT_ID
      - echo $CODEBUILD_WEBHOOK_EVENT
      - echo $CODEBUILD_RESOLVED_SOURCE_VERSION

      - if [ "$CODEBUILD_WEBHOOK_EVENT" = "PULL_REQUEST_MERGED" ];
        then export CODEBUILD_GIT_BRANCH="develop";
        echo "Merging to develop";
        else CODEBUILD_GIT_BRANCH="$(git branch -a --contains $CODEBUILD_RESOLVED_SOURCE_VERSION | sed -n 2p | awk '{ printf $1 }')";
        export CODEBUILD_GIT_BRANCH=${CODEBUILD_GIT_BRANCH#remotes/origin/};
        fi

      - echo "CODEBUILD_GIT_BRANCH=${CODEBUILD_GIT_BRANCH}"
      - echo "CODEBUILD_SOURCE_VERSION=${CODEBUILD_SOURCE_VERSION}"

  pre_build:
    commands:
      - echo Executing pre_build phase
      - mkdir /build_container
      - mkdir /jcsda
      - cd CI

      - git lfs install # creates .gitconfig

      # ufo-bundle
      - ./clone.sh $GIT_USER $GIT_PASS ufo-bundle $CODEBUILD_GIT_BRANCH ufo-bundle /jcsda

      # ufo
      - ./clone.sh $GIT_USER $GIT_PASS ufo $CODEBUILD_GIT_BRANCH ufo /jcsda/ufo-bundle

      # crtm
      - ./clone.sh $GIT_USER $GIT_PASS crtm $CODEBUILD_GIT_BRANCH crtm /jcsda/ufo-bundle

      # ioda
      - ./clone.sh $GIT_USER $GIT_PASS ioda $CODEBUILD_GIT_BRANCH ioda /jcsda/ufo-bundle

      # disable git-lfs
      - git lfs install --skip-smudge

      # atlas
      - ./clone.sh $GIT_USER $GIT_PASS atlas $CODEBUILD_GIT_BRANCH atlas /jcsda/ufo-bundle

      # saber
      - ./clone.sh $GIT_USER $GIT_PASS saber $CODEBUILD_GIT_BRANCH saber /jcsda/ufo-bundle

      # oops
      - ./clone.sh $GIT_USER $GIT_PASS oops $CODEBUILD_GIT_BRANCH oops /jcsda/ufo-bundle

      # ropp
      - ./clone.sh $GIT_USER $GIT_PASS ropp-test $CODEBUILD_GIT_BRANCH ropp-ufo /jcsda/ufo-bundle

      # geos-aero
      - ./clone.sh $GIT_USER $GIT_PASS geos-aero $CODEBUILD_GIT_BRANCH geos-aero /jcsda/ufo-bundle

      #fckit
      - ./clone.sh $GIT_USER $GIT_PASS fckit $CODEBUILD_GIT_BRANCH fckit /jcsda/ufo-bundle

      #gsw
      - ./clone.sh $GIT_USER $GIT_PASS GSW-Fortran $CODEBUILD_GIT_BRANCH gsw /jcsda/ufo-bundle

      - ls
      - cd /jcsda/ufo-bundle
      - ls

      - sed -i 's/BRANCH develop  UPDATE//' CMakeLists.txt
      - sed -i 's/BRANCH develop //' CMakeLists.txt
      - sed -i -e '/ecbuild_bundle( PROJECT ufo/i\
        ecbuild_bundle( PROJECT ropp-ufo  GIT "https://github.com/JCSDA/ropp-test.git" )' CMakeLists.txt
      - sed -i -e '/ecbuild_bundle( PROJECT ufo/i\
        ecbuild_bundle( PROJECT geos-aero  GIT "https://github.com/JCSDA/geos-aero.git" )' CMakeLists.txt

  build:
    commands:
      - echo Executing build phase
      - echo $CODEBUILD_BUILD_SUCCEEDING
      - export BUILD_STATUS="0"
      - echo $BUILD_STATUS

      - cd /build_container
      - ecbuild /jcsda/ufo-bundle/
      - cd ufo
      - make -j4

      - if [ "$CODEBUILD_BUILD_SUCCEEDING" = "1" ];
        then export BUILD_STATUS="1";
        echo "Build passed";
        fi
      - echo $BUILD_STATUS

      - cd /build_container/ufo
      - ctest

  post_build:
    commands:
      - echo Executing post_build phase
      - echo $CODEBUILD_BUILD_SUCCEEDING
      - if [ "$BUILD_STATUS" = "1" ] && [ "$CODEBUILD_BUILD_SUCCEEDING" = "0" ];
        then echo "Build passed, rerunning failed tests";
        cd /build_container/ufo;
        ctest -VV --rerun-failed;
        else echo "Build failed";
        fi
