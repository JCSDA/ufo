# Here we
# 1. Run the create_qc_fromexample.sh script to generate source code of an observation
#    operator from the template files in the 'example' subdirectory.
# 2. Move the generated source code to the binary directory.
# 3. Build these sources into a library (linked to ufo).
#
# If the template files get out of sync with the ufo source code, step 3 will fail,
# and hopefully someone will update the template files.
#
# Note: we don't use the example/CMakeLists.txt file, so unfortunately we won't be notified
# if that particular file gets out of date.

set(OUTPUT_FILE_NAMES
  AutogeneratedFilter.cc
  AutogeneratedFilter.h
  AutogeneratedFilter.interface.F90
  AutogeneratedFilter.interface.h
  ufo_autogeneratedfilter_mod.F90)

set(INTERMEDIATE_OUTPUT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/../../src/ufo/filters")
set(FINAL_OUTPUT_DIR "${CMAKE_CURRENT_BINARY_DIR}/ufo/filters")

list(TRANSFORM OUTPUT_FILE_NAMES
     PREPEND "${INTERMEDIATE_OUTPUT_DIR}/"
     OUTPUT_VARIABLE INTERMEDIATE_OUTPUT_FILE_PATHS)
list(TRANSFORM OUTPUT_FILE_NAMES
     PREPEND "${FINAL_OUTPUT_DIR}/"
     OUTPUT_VARIABLE FINAL_OUTPUT_FILE_PATHS)

set(DEPENDENCIES
  create_qc_fromexample.sh
  example/Example.cc
  example/Example.h
  example/Example.interface.h
  example/Example.interface.F90
  example/ufo_example_mod.F90)

list(TRANSFORM DEPENDENCIES PREPEND "${CMAKE_CURRENT_SOURCE_DIR}/")

# Define a command generating the source code of a QC filter.
#
# It outputs the source code to the intermediate output directory (within the source tree),
# copies it to the final output directory (within the binary tree) and finally removes
# the files added to the intermediate output directory. We don't use CMake's rename command,
# since it only works within a single filesystem.
add_custom_command(
  OUTPUT ${FINAL_OUTPUT_FILE_PATHS}
  COMMAND "${CMAKE_CURRENT_SOURCE_DIR}/create_qc_fromexample.sh" AutogeneratedFilter
  COMMAND "${CMAKE_COMMAND}" -E make_directory "${FINAL_OUTPUT_DIR}"
  COMMAND "${CMAKE_COMMAND}" -E copy ${INTERMEDIATE_OUTPUT_FILE_PATHS} "${FINAL_OUTPUT_DIR}"
  COMMAND "${CMAKE_COMMAND}" -E remove -f ${INTERMEDIATE_OUTPUT_FILE_PATHS}
  DEPENDS ${DEPENDENCIES}
  VERBATIM
  WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})

# Build the generated source code into a library.
add_library(autogeneratedfilter OBJECT ${FINAL_OUTPUT_FILE_PATHS})
target_link_libraries(autogeneratedfilter ufo)
target_include_directories(autogeneratedfilter PUBLIC "${CMAKE_CURRENT_BINARY_DIR}")

add_subdirectory(test)
