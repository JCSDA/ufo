time window:
  begin: 2000-01-01T00:00:00Z
  end: 2030-01-01T00:00:00Z

observations:

# Tests the flags, initial value and force reinitialization options
- obs space:
    name: Test data 1
    obsdatain:
      engine:
        type: H5File
        obsfile: Data/ufo/testinput_tier_1/filters_testdata.nc4
    simulated variables: [variable1, variable2]
  obs filters:
  - filter: Create Diagnostic Flags
    flags:
    - name: FlagA
    - name: FlagB
      initial value: true
    - name: FlagC
      initial value: false
  - filter: Create Diagnostic Flags
    flags:
    - name: FlagB
      initial value: false
      force reinitialization: false
    - name: FlagC
      initial value: true
      force reinitialization: true
  compareVariables:
  - test:
      name: DiagnosticFlags/FlagA/variable1
    reference:
      name: TestReference/falses
  - test:
      name: DiagnosticFlags/FlagA/variable2
    reference:
      name: TestReference/falses
  - test:
      name: DiagnosticFlags/FlagB/variable1
    reference:
      name: TestReference/trues
  - test:
      name: DiagnosticFlags/FlagB/variable2
    reference:
      name: TestReference/trues
  - test:
      name: DiagnosticFlags/FlagC/variable1
    reference:
      name: TestReference/trues
  - test:
      name: DiagnosticFlags/FlagC/variable2
    reference:
      name: TestReference/trues

# Tests the filter variables option (set to a valid value)
- obs space:
    name: Test data 2
    obsdatain:
      engine:
        type: H5File
        obsfile: Data/ufo/testinput_tier_1/filters_testdata.nc4
    simulated variables: [variable1, variable2, variable3]
  obs filters:
  - filter: Create Diagnostic Flags
    filter variables: [variable1, variable2]
    flags:
    - name: FlagA
    - name: FlagB
      initial value: true
  compareVariables:
  - test:
      name: DiagnosticFlags/FlagA/variable1
    reference:
      name: TestReference/falses
  - test:
      name: DiagnosticFlags/FlagA/variable2
    reference:
      name: TestReference/falses
  - test:
      name: DiagnosticFlags/FlagB/variable1
    reference:
      name: TestReference/trues
  - test:
      name: DiagnosticFlags/FlagB/variable2
    reference:
      name: TestReference/trues
  expectVariablesNotToExist:
  - name: DiagnosticFlags/FlagA/variable3
  - name: DiagnosticFlags/FlagB/variable3

# Tests the filter variables option (set to an invalid value)
- obs space:
    name: Test data 3
    obsdatain:
      engine:
        type: H5File
        obsfile: Data/ufo/testinput_tier_1/filters_testdata.nc4
    simulated variables: [variable1, variable2]
    observed variables: [variable1, variable2]
  obs filters:
  - filter: Create Diagnostic Flags
    filter variables: [variable1, variable3]
    flags:
    - name: FlagA
  expectExceptionWithMessage: Filter variable 'variable3' is not an observed variable

# Tests setting the observationReport flag and no other flags
- obs space:
    name: Test data 4
    obsdatain:
      engine:
        type: H5File
        obsfile: Data/ufo/testinput_tier_1/filters_testdata.nc4
    simulated variables: [variable1]
  obs filters:
  - filter: Create Diagnostic Flags
    filter variables: []
    create observation report flags: true
    flags:
    - name: FlagA
    - name: FlagB
      initial value: true
  compareVariables:
  - test:
      name: DiagnosticFlags/FlagA/observationReport
    reference:
      name: TestReference/falses
  - test:
      name: DiagnosticFlags/FlagB/observationReport
    reference:
      name: TestReference/trues
  expectVariablesNotToExist:
  - name: DiagnosticFlags/FlagA/variable1
  - name: DiagnosticFlags/FlagB/variable1

# Tests setting flags for the observation report and variable1
- obs space:
    name: Test data 5
    obsdatain:
      engine:
        type: H5File
        obsfile: Data/ufo/testinput_tier_1/filters_testdata.nc4
    simulated variables: [variable1, variable2]
  obs filters:
  - filter: Create Diagnostic Flags
    filter variables: [variable1]
    create observation report flags: true
    flags:
    - name: FlagA
    - name: FlagB
      initial value: true
  compareVariables:
  - test:
      name: DiagnosticFlags/FlagA/observationReport
    reference:
      name: TestReference/falses
  - test:
      name: DiagnosticFlags/FlagB/observationReport
    reference:
      name: TestReference/trues
  - test:
      name: DiagnosticFlags/FlagA/variable1
    reference:
      name: TestReference/falses
  - test:
      name: DiagnosticFlags/FlagB/variable1
    reference:
      name: TestReference/trues
  expectVariablesNotToExist:
  - name: DiagnosticFlags/FlagA/variable2
  - name: DiagnosticFlags/FlagB/variable2

  # Tests the bitmap option
- obs space:
    name: Test data 6
    obsdatain:
      engine:
        type: H5File
        obsfile: Data/ufo/testinput_tier_1/filters_testdata.nc4
    obsdataout:
      engine:
        type: H5File
        obsfile: Data/filters_testdata_6.nc4
    simulated variables: [variable1, variable2]
  obs filters:
  - filter: Create Diagnostic Flags
    bitmap diagnostic flags: true
  compareVariables:
  - test:
      name: DiagnosticFlags/variable1
    reference:
      name: TestReference/zeroes        # no bits were set -> all values zero
  - test:
      name: DiagnosticFlags/variable2
    reference:
      name: TestReference/zeroes        # no bits were set -> all values zero

# Tests the bitmap option with set flag bit
- obs space:
    name: Test data 7
    obsdatain:
      engine:
        type: H5File
        obsfile: Data/ufo/testinput_tier_1/filters_testdata.nc4
    obsdataout:
      engine:
        type: H5File
        obsfile: Data/filters_testdata_7.nc4
    simulated variables: [variable1, variable2]
  obs filters:
  - filter: Create Diagnostic Flags
    bitmap diagnostic flags: true
  - filter: Perform Action
    filter variables: [variable1]
    where:
    - variable:
        name: MetaData/var1
      minvalue: 0 # everywhere
    action:
      name: set flag bit
      bit: 0
  compareVariables:
  - test:
      name: DiagnosticFlags/variable1
    reference:
      name: TestReference/ones            # 0-th bit was set for variable1 -> all values one
  - test:
      name: DiagnosticFlags/variable2
    reference:
      name: TestReference/zeroes          # no bits were set for variable2 -> all values zero

# Tests the bitmap option with set flag bit
- obs space:
    name: Test data 8
    obsdatain:
      engine:
        type: H5File
        obsfile: Data/ufo/testinput_tier_1/filters_testdata.nc4
    obsdataout:
      engine:
        type: H5File
        obsfile: Data/filters_testdata_8.nc4
    simulated variables: [variable1, variable2]
  obs filters:
  - filter: Create Diagnostic Flags
    bitmap diagnostic flags: true
  - filter: Perform Action
    filter variables: [variable1]
    where:
    - variable:
        name: MetaData/var1
      minvalue: 0 # everywhere
    action:
      name: set flag bit
      bit: 0
  - filter: Perform Action
    filter variables: [variable1, variable2]
    where:
    - variable:
        name: MetaData/var1
      minvalue: 0 # everywhere
    action:
      name: set flag bit
      bit: 1
  compareVariables:
  - test:
      name: DiagnosticFlags/variable1
    reference:
      name: TestReference/threes       # 0-th and 1st bit were set for variable1 -> all values three
  - test:
      name: DiagnosticFlags/variable2
    reference:
      name: TestReference/twos         # only 1st bit was set for variable2 -> all values two

# Tests the bitmap option together with flags option
- obs space:
    name: Test data 9
    obsdatain:
      engine:
        type: H5File
        obsfile: Data/ufo/testinput_tier_1/filters_testdata.nc4
    obsdataout:
      engine:
        type: H5File
        obsfile: Data/filters_testdata_9.nc4
    simulated variables: [variable1, variable2]
  obs filters:
  - filter: Create Diagnostic Flags
    bitmap diagnostic flags: true
    flags:
    - name: FlagA
      initial value: true
    - name: FlagB
      initial value: false
  compareVariables:
  - test:
      name: DiagnosticFlags/variable1
    reference:
      name: TestReference/zeroes       # no bits were set -> all values zero
  - test:
      name: DiagnosticFlags/variable2
    reference:
      name: TestReference/zeroes       # no bits were set -> all values zero
  - test:
      name: DiagnosticFlags/FlagA/variable1
    reference:
      name: TestReference/trues
  - test:
      name: DiagnosticFlags/FlagA/variable2
    reference:
      name: TestReference/trues
  - test:
      name: DiagnosticFlags/FlagB/variable1
    reference:
      name: TestReference/falses
  - test:
      name: DiagnosticFlags/FlagB/variable2
    reference:
      name: TestReference/falses

# Tests with channel variables
- obs space:
    name: Test data 10
    obsdatain:
      engine:
        type: H5File
        obsfile: Data/ufo/testinput_tier_1/filters_testdata_channels.nc4
    obsdataout:
      engine:
        type: H5File
        obsfile: Data/filters_testdata_10.nc4
    simulated variables: [variable1, variable2]
    channels: 3, 5
  obs filters:
  - filter: Create Diagnostic Flags
    bitmap diagnostic flags: true
    flags:
    - name: FlagA
      initial value: true
    - name: FlagB
      initial value: false
  compareVariables:
  - test:
      name: DiagnosticFlags/variable1
    reference:
      name: TestReference/zeroes       # no bits were set -> all values zero
  - test:
      name: DiagnosticFlags/variable2
    reference:
      name: TestReference/zeroes       # no bits were set -> all values zero
  - test:
      name: DiagnosticFlags/FlagA/variable1
    reference:
      name: TestReference/trues
  - test:
      name: DiagnosticFlags/FlagA/variable2
    reference:
      name: TestReference/trues
  - test:
      name: DiagnosticFlags/FlagB/variable1
    reference:
      name: TestReference/falses
  - test:
      name: DiagnosticFlags/FlagB/variable2
    reference:
      name: TestReference/falses

# Test with channel variables and setting flags only for some variables
- obs space:
    name: Test data 11
    obsdatain:
      engine:
        type: H5File
        obsfile: Data/ufo/testinput_tier_1/filters_testdata_channels.nc4
    obsdataout:
      engine:
        type: H5File
        obsfile: Data/filters_testdata_11.nc4
    simulated variables: [variable1, variable2]
    channels: 3, 5
  obs filters:
  - filter: Create Diagnostic Flags
    bitmap diagnostic flags: true
    flags:
    - name: FlagA
      initial value: false
  - filter: Perform Action
    filter variables:
    - name: variable2
      channels: 5
    where:
    - variable:
        name: MetaData/latitude
      minvalue: 0 # everywhere
    actions:
    - name: set flag bit
      bit: 0
    - name: set
      flag: FlagA
  compareVariables:
  - test:
      name: DiagnosticFlags/variable1
    reference:
      name: TestReference/zeroes       # no bits were set -> all values zero
  - test:
      name: DiagnosticFlags/variable2
    reference:
      name: TestReference/zeroes_ones  # 0-th bit was set only for the second channel (channel 5)
  - test:
      name: DiagnosticFlags/FlagA/variable1
    reference:
      name: TestReference/falses
  - test:
      name: DiagnosticFlags/FlagA/variable2
    reference:
      name: TestReference/falses_trues
