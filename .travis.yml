#======================================================================
# Project settings
#======================================================================
env:
  global:
    secure: CUp08dHssPh8u2769hB+YbH7tkZ3ScFZ1N3lPkaFVhUWSv/76UTgUHJEsKgEXiyxbGbP6QEWPug9nVBD/hdf+8ApodoJSL/Ji34/8N0xMs4eRFYBKZ5S6PONJiRLIRKBBIYk6P7zHUGlFN9TpSIUQyBK9kM6/VGSVofBPuxDmRQKIMcsvKVkCsJQn6/fNzIe7bpM8FPaBIKLsCTQWyNx1qOsH489VVl9JfP/ujoM/qNzTDK0dGEPaGr+uTCkikPNvKVCQR26i5Wt/+Lp8Ho5uu2ymdjJh5amjovhVBKYAnYVCrlR5BsB3ZQeSlDJ6/VcuEPpwwiLMDLLl2FEBhnrcei9IVebKCMQ289O4Nz3RRQaN9NZudtI2lHMAP3NBR97EzOITNxJcCDXAksWAlmYsYckaogn7qqQc78Zb17fgKNU40FNnRHMTotDmShfee4VYcqsGXuapaDhABDJsXa/bhmknCavojSS9Zm4YykSJtUpBHR1mNuv9ksZQgY0pN161f/sOv8V0EgcyAgAhuJd+E5fAke+K0Pt+kfeDc2AxsuMRkOcFzFREExB0Eer4Qn4K9hwaRB/g5o4A7tazWGxS3slMt94runWdc93DiUn3SrMpAeZZ5G3F/29kmYrnW7sRvy3mIn397x8uHzkbzhA4qUyjmy+aIeC7fzbY4VGI/Q=
 
branches:
  only:
    - develop

language: cpp

services:
  - docker

before_install:
  - echo -e "machine github.com\n  login $GITHUB_TOKEN" > ~/.netrc
  - git lfs pull

  - date
  - REPO_SOURCE_DIR=${TRAVIS_BUILD_DIR}/jcsda/src_repo
#  create the same file structure on Travis VM and Docker container
  - mkdir -p ${TRAVIS_BUILD_DIR}/jcsda/src_repo
# echo branch info
  - echo $TRAVIS_PULL_REQUEST
  - echo $TRAVIS_PULL_REQUEST_BRANCH
  - echo $TRAVIS_BRANCH
  - export BRANCH=$(if [ "$TRAVIS_PULL_REQUEST" == "false" ]; then echo $TRAVIS_BRANCH; else echo $TRAVIS_PULL_REQUEST_BRANCH; fi)
  - echo "TRAVIS_BRANCH=$TRAVIS_BRANCH, PR=$PR, BRANCH=$BRANCH"
#======================================================================
# Clone all repos
#======================================================================
  - pwd

#  checkout for the same branch name in ufo-bundle
  - git clone https://${GH_TOKEN}@github.com/jcsda/ufo-bundle.git ${REPO_SOURCE_DIR}/ufo-bundle
  - cd ${REPO_SOURCE_DIR}/ufo-bundle
  - git checkout $BRANCH || echo "No branch named $BRANCH in oops repo"
  - cd $REPO_SOURCE_DIR  

#  checkout for the same branch name in jedi-cmake
  - git clone https://${GH_TOKEN}@github.com/jcsda/jedi-cmake.git ${REPO_SOURCE_DIR}/ufo-bundle/jedicmake
  - cd ${REPO_SOURCE_DIR}/ufo-bundle/jedicmake
  - git checkout $BRANCH || echo "No branch named $BRANCH in oops repo"
  - cd $REPO_SOURCE_DIR

#  clone the testing branch of ufo
  - git clone -b $BRANCH https://${GH_TOKEN}@github.com/jcsda/ufo.git ${REPO_SOURCE_DIR}/ufo-bundle/ufo 

#  checkout for the same branch name in crtm
  - date
  - git clone https://${GH_TOKEN}@github.com/jcsda/crtm.git ${REPO_SOURCE_DIR}/ufo-bundle/crtm
  - cd ${REPO_SOURCE_DIR}/ufo-bundle/crtm
  - git checkout $BRANCH || echo "No branch named $BRANCH in crtm repo"
  - cd $REPO_SOURCE_DIR
  - date  

#  checkout for the same branch name in ioda
  - git clone https://${GH_TOKEN}@github.com/jcsda/ioda.git ${REPO_SOURCE_DIR}/ufo-bundle/ioda
  - cd ${REPO_SOURCE_DIR}/ufo-bundle/ioda
  - git checkout $BRANCH || echo "No branch named $BRANCH in ioda repo"
  - cd $REPO_SOURCE_DIR  

  - if [ "$BRANCH" = "develop" ];
    then export BRANCH_FORK="release-stable";
    else export BRANCH_FORK=$BRANCH;
    fi

#  disable git lfs    
  - git lfs install --skip-smudge

#  checkout for the same branch name in oops
  - git clone https://${GH_TOKEN}@github.com/jcsda/oops.git ${REPO_SOURCE_DIR}/ufo-bundle/oops
  - cd ${REPO_SOURCE_DIR}/ufo-bundle/oops
  - git checkout $BRANCH || echo "No branch named $BRANCH in oops repo"
  - cd $REPO_SOURCE_DIR  

#  checkout for the same branch name in atlas
  - git clone https://${GH_TOKEN}@github.com/jcsda/atlas.git ${REPO_SOURCE_DIR}/ufo-bundle/atlas
  - cd ${REPO_SOURCE_DIR}/ufo-bundle/atlas
  - git checkout $BRANCH_FORK || echo "No branch named $BRANCH in atlas repo"; git checkout release-stable
  - cd $REPO_SOURCE_DIR

#  checkout for the same branch name in saber
  - git clone https://${GH_TOKEN}@github.com/jcsda/saber.git ${REPO_SOURCE_DIR}/ufo-bundle/saber
  - cd ${REPO_SOURCE_DIR}/ufo-bundle/saber
  - git checkout $BRANCH || echo "No branch named $BRANCH in saber repo"
  - cd $REPO_SOURCE_DIR  

#  checkout for the same branch name in ropp
  - git clone https://${GH_TOKEN}@github.com/jcsda/ropp-test.git ${REPO_SOURCE_DIR}/ufo-bundle/ropp-ufo
  - cd ${REPO_SOURCE_DIR}/ufo-bundle/ropp-ufo
  - git checkout $BRANCH || echo "No branch named $BRANCH in ioda repo"
  - cd $REPO_SOURCE_DIR  

  - git clone https://${GH_TOKEN}@github.com/jcsda/GSW-Fortran.git ${REPO_SOURCE_DIR}/ufo-bundle/gsw

#  checkout for the same branch name in fckit
  - git clone https://${GH_TOKEN}@github.com/jcsda/fckit.git ${REPO_SOURCE_DIR}/ufo-bundle/fckit
  - cd ${REPO_SOURCE_DIR}/ufo-bundle/fckit
  - git checkout $BRANCH_FORK || echo "No branch named $BRANCH in atlas repo"; git checkout release-stable
  - cd $REPO_SOURCE_DIR

#  checkout for the same branch name in geos-aero
  - git clone https://${GH_TOKEN}@github.com/jcsda/geos-aero.git ${REPO_SOURCE_DIR}/ufo-bundle/geos-aero
  - cd ${REPO_SOURCE_DIR}/ufo-bundle/geos-aero
  - git checkout $BRANCH || echo "No branch named $BRANCH in geos-aero repo"
  - cd $REPO_SOURCE_DIR  

# do no switch to develop branch by removing 
# develop UPDATE in CMakeLists.txt in ufo-bundle

  - cd ufo-bundle
  - sed -i 's/BRANCH develop  UPDATE//' CMakeLists.txt
  - sed -i 's/BRANCH release-stable UPDATE//' CMakeLists.txt
  - sed -i -e '/ecbuild_bundle( PROJECT ufo/i\
    ecbuild_bundle( PROJECT ropp-ufo  GIT "https://github.com/JCSDA/ropp-test.git" )' CMakeLists.txt
  - sed -i -e '/ecbuild_bundle( PROJECT ufo/i\
    ecbuild_bundle( PROJECT geos-aero  GIT "https://github.com/JCSDA/geos-aero.git" )' CMakeLists.txt
  - cat CMakeLists.txt
  - cd ${REPO_SOURCE_DIR}
  - ls ${REPO_SOURCE_DIR}
  - ls ${REPO_SOURCE_DIR}/ufo-bundle
  - find . -name \* -exec chmod 777 {} \;

#======================================================================
# get docker image
# FROM  jcsda/docker:latest
#======================================================================
  - cd ${REPO_SOURCE_DIR}/ufo-bundle/ufo
  - date
  - cd CI
  - docker build -t jcsda/docker --build-arg=Dockerfile .  #Dockerfile handles ssh for mpi
  - date
  - docker images
  # request codecov to detect CI environment to pass through to docker
  - ci_env=`bash <(curl -s https://codecov.io/env)`
  - docker run -d -t $ci_env --name jcsda_container -v ${REPO_SOURCE_DIR}/ufo-bundle:/jcsda/src_repo jcsda/docker
  - docker ps -a
  - date
#======================================================================
# Here are the run steps
#======================================================================
script:
  - docker exec jcsda_container ls
  - docker exec jcsda_container ls /jcsda/src_repo
  - docker exec jcsda_container bash -c 'cp -r /jcsda/.openmpi/ ~/'
##  use cmake with flags to generate test coverage reports
  - docker exec jcsda_container bash -c 'cd /build_container && cmake -DCMAKE_MODULE_PATH=/usr/local/share/ecbuild/cmake/ -DCMAKE_BUILD_TYPE=Debug -DENABLE_GPROF=ON  /jcsda/src_repo' 
  - docker exec jcsda_container bash -c 'cd /build_container/ufo && make -j4'
  - date
  - docker exec jcsda_container bash -c 'cd /build_container/ufo && ctest'
  - date

  - docker exec jcsda_container bash -c 'cd /build_container/ufo && bash <(curl -s https://codecov.io/bash) -t e23dfd1d-85be-4e0f-aaf3-81911fec7178 -R /jcsda/src_repo/ufo/'
